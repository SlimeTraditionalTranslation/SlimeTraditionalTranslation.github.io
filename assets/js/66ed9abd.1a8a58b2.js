"use strict";(self.webpackChunkslime_traditional_translation=self.webpackChunkslime_traditional_translation||[]).push([[4581],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>d});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),u=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},m=function(e){var t=u(e.components);return r.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),p=u(n),d=a,h=p["".concat(s,".").concat(d)]||p[d]||c[d]||i;return n?r.createElement(h,l(l({ref:t},m),{},{components:n})):r.createElement(h,l({ref:t},m))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,l=new Array(i);l[0]=p;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:a,l[1]=o;for(var u=2;u<i;u++)l[u]=n[u];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},7354:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>c,frontMatter:()=>i,metadata:()=>o,toc:()=>u});var r=n(7462),a=(n(7294),n(3905));const i={title:"Developer Guide (7 GEO Resources)",sidebar_position:8},l=void 0,o={unversionedId:"Slimefun/Other-Plugins/Developer-Guide/Developer-Guide-(7-GEO-Resources)",id:"Slimefun/Other-Plugins/Developer-Guide/Developer-Guide-(7-GEO-Resources)",title:"Developer Guide (7 GEO Resources)",description:"This is the seventh Part of our Developer Guide, you can find a full overview on our main page.",source:"@site/docs/Slimefun/Other-Plugins/Developer-Guide/Developer-Guide-(7-GEO-Resources).md",sourceDirName:"Slimefun/Other-Plugins/Developer-Guide",slug:"/Slimefun/Other-Plugins/Developer-Guide/Developer-Guide-(7-GEO-Resources)",permalink:"/docs/Slimefun/Other-Plugins/Developer-Guide/Developer-Guide-(7-GEO-Resources)",draft:!1,tags:[],version:"current",lastUpdatedAt:1661087281,formattedLastUpdatedAt:"Aug 21, 2022",sidebarPosition:8,frontMatter:{title:"Developer Guide (7 GEO Resources)",sidebar_position:8},sidebar:"tutorialSidebar",previous:{title:"Developer Guide (6 Custom Heads)",permalink:"/docs/Slimefun/Other-Plugins/Developer-Guide/Developer-Guide-(6-Custom-Heads)"},next:{title:"Developer Guide (9 Compiling)",permalink:"/docs/Slimefun/Other-Plugins/Developer-Guide/Developer-Guide-(9-Compiling)"}},s={},u=[{value:"1. A recap",id:"1-a-recap",level:2},{value:"2. Creating a new Item",id:"2-creating-a-new-item",level:2},{value:"3. Creating a GEOResource",id:"3-creating-a-georesource",level:2},{value:"4. Final registration",id:"4-final-registration",level:2}],m={toc:u};function c(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"This is the ",(0,a.kt)("strong",{parentName:"p"},"seventh Part")," of our Developer Guide, you can find a full overview on our ",(0,a.kt)("a",{parentName:"p",href:"/docs/Slimefun/Other-Plugins/Developer-Guide/"},"main page"),"."),(0,a.kt)("p",null,"If you haven't checked out the ",(0,a.kt)("a",{parentName:"p",href:"Developer-Guide-(6-Custom-Heads).md"},"sixth Part of this Guide"),", then please do that."),(0,a.kt)("h2",{id:"1-a-recap"},"1. A recap"),(0,a.kt)("p",null,"In the last part we discussed how to create custom heads and use these heads in items and categories."),(0,a.kt)("p",null,"Today we will expand upon that knowledge and create a new ore that is obtainable through the ",(0,a.kt)("a",{parentName:"p",href:"/docs/Slimefun/GPS/GEO-Miner"},"GEO - Miner"),"."),(0,a.kt)("p",null,"But before we dive into that, here is our code from the last part:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'NamespacedKey categoryId = new NamespacedKey(this, "cool_category");\nCustomItemStack categoryItem = new CustomItemStack(SkullItem.fromBase64("eyJ0ZXh0dXJlcyI6eyJTS0lOIjp7InVybCI6Imh0dHA6Ly90ZXh0dXJlcy5taW5lY3JhZnQubmV0L3RleHR1cmUvZTk1MmQyYjNmMzUxYTZiMDQ4N2NjNTlkYjMxYmY1ZjI2NDExMzNlNWJhMDAwNmIxODU3NmU5OTZhMDI5M2U1MiJ9fX0="), "&4Our very cool Category");\nItemGroup itemGroup = new ItemGroup(categoryId, categoryItem);\n\n// The custom item for our SlimefunItem\nSlimefunItemStack itemStack = new SlimefunItemStack("FIRE_CAKE", "eyJ0ZXh0dXJlcyI6eyJTS0lOIjp7InVybCI6Imh0dHA6Ly90ZXh0dXJlcy5taW5lY3JhZnQubmV0L3RleHR1cmUvZTk1MmQyYjNmMzUxYTZiMDQ4N2NjNTlkYjMxYmY1ZjI2NDExMzNlNWJhMDAwNmIxODU3NmU5OTZhMDI5M2U1MiJ9fX0=", "&4Fire Cake", "", LoreBuilder.radioactive(Radioactivity.HIGH), LoreBuilder.HAZMAT_SUIT_REQUIRED);\n\n// A 3x3 shape representing our recipe\nItemStack[] recipe = {\n    new ItemStack(Material.BLAZE_POWDER),    null,                               new ItemStack(Material.BLAZE_POWDER),\n    null,                                    new ItemStack(Material.CAKE),       null,\n    new ItemStack(Material.BLAZE_POWDER),    null,                               new ItemStack(Material.BLAZE_POWDER)\n};\n\n// We are now using our own custom class for this\nFireCake cake = new FireCake(itemGroup, itemStack, RecipeType.ENHANCED_CRAFTING_TABLE, recipe);\ncake.register(this);\n\nNamespacedKey researchKey = new NamespacedKey(this, "fire_cake");\nResearch research = new Research(researchKey, 123, "You don\'t wanna eat this", 10);\nresearch.addItems(cake);\n\nresearch.register();\n')),(0,a.kt)("h2",{id:"2-creating-a-new-item"},"2. Creating a new Item"),(0,a.kt)("p",null,"GEO Resources obviously need an Item form too, so we will start with that."),(0,a.kt)("p",null,"Right below our previous code we will start to create a new SlimefunItem. As usual we are gonna start with the ItemStack."),(0,a.kt)("p",null,"But wait... first we will need to come up with a resource."),(0,a.kt)("p",null,"How about an ore that is exclusive to the End dimension? An Ender Ore? Yeah let's go with that."),(0,a.kt)("p",null,"We are still inside our ",(0,a.kt)("inlineCode",{parentName:"p"},"onEnable()")," method and right below the code from earlier:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'// ...\n\nSlimefunItemStack enderOreItem = new SlimefunItemStack("ENDER_ORE", "eyJ0ZXh...", "&5Ender Ore", "", "&rThis is a cool Ore", "&rGEO-Mine me in the End");\n')),(0,a.kt)("p",null,"We will also use a custom head texture for this but I am gonna shorten the long String for the texture to make it more readable."),(0,a.kt)("p",null,"Now that we have our ItemStack we can also create the Item, we will use the ItemGroup we created earlier."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'// ...\nSlimefunItemStack enderOreItem = new SlimefunItemStack("ENDER_ORE", "eyJ0ZXh...", "&5Ender Ore", "", "&rThis is a cool Ore", "&rGEO-Mine me in the End");\nSlimefunItem enderOre = new SlimefunItem(itemGroup, enderOreItem, ..., ...);\nenderOre.register();\n')),(0,a.kt)("p",null,"Now you might notice that the last two parameters are still missing."),(0,a.kt)("p",null,"We don't want our item to be crafted, we want it to be obtained using the GEO Miner and also show that in the guide."),(0,a.kt)("p",null,"For this we can use the recipe type ",(0,a.kt)("inlineCode",{parentName:"p"},"RecipeType.GEO_MINER"),". However... having this RecipeType will ",(0,a.kt)("strong",{parentName:"p"},"not")," add our item to the GEO Miner automatically, we still have to do that in the next step."),(0,a.kt)("p",null,'This Recipe Type only functions as a "display item", to inform users on how to obtain it. Therefore we don\'t really need a recipe either.'),(0,a.kt)("p",null,"But we will still need to pass a Recipe Array with the length 9, so we will just create an empty 9 slot array."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'// ...\nSlimefunItemStack enderOreItem = new SlimefunItemStack("ENDER_ORE", "eyJ0ZXh...", "&5Ender Ore", "", "&rThis is a cool Ore", "&rGEO-Mine me in the End");\nSlimefunItem enderOre = new SlimefunItem(itemGroup, enderOreItem, RecipeType.GEO_MINER, new ItemStack[9]);\nenderOre.register();\n')),(0,a.kt)("p",null,"Now our item is pretty much done and registered."),(0,a.kt)("p",null,"We still need to create the resource for the GEO Miner though, so that's what we will do next."),(0,a.kt)("h2",{id:"3-creating-a-georesource"},"3. Creating a GEOResource"),(0,a.kt)("p",null,"For this we will need to create a new class again."),(0,a.kt)("p",null,'So create a new class/file and name it something meaningful, we will just call it "EnderOreResource".'),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"public class EnderOreResource {\n\n}\n")),(0,a.kt)("p",null,"Now we need to implement the behaviour of a GEO Resource, the GEO Miner uses an interface for this called ",(0,a.kt)("inlineCode",{parentName:"p"},"GEOResource"),"."),(0,a.kt)("p",null,"Simply implement that interface into your class and remember to import the interface."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"public class EnderOreResource implements GEOResource {\n\n}\n")),(0,a.kt)("p",null,"Your IDE will probably start warning you about missing methods at this point."),(0,a.kt)("p",null,"Whenever you implement an interface you will also have to implement its methods. You can see all methods from GEOResource on our ",(0,a.kt)("a",{parentName:"p",href:"https://slimefun.github.io/javadocs/Slimefun4/docs/io/github/thebusybiscuit/slimefun4/api/geo/GEOResource.html"},"Javadocs"),". We are gonna start simple, the first method we need to implement is ",(0,a.kt)("inlineCode",{parentName:"p"},"getName()"),", so we implement that method and return the name of our resource."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'public class EnderOreResource implements GEOResource {\n\n  @Override\n  public String getName() {\n    return "Ender Ore";\n  }\n\n}\n')),(0,a.kt)("p",null,"Next up is the method ",(0,a.kt)("inlineCode",{parentName:"p"},"isObtainableFromGEOMiner()")," which determines whether this resource should be added to the GEO Miner."),(0,a.kt)("p",null,"For us it is a definite yes, so we return true."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'public class EnderOreResource implements GEOResource {\n\n  @Override\n  public String getName() {\n    return "Ender Ore";\n  }\n\n  @Override\n  public boolean isObtainableFromGEOMiner() {\n    return true;\n  }\n\n}\n')),(0,a.kt)("p",null,"Now we come to the generator settings. We got two methods which handle that: ",(0,a.kt)("inlineCode",{parentName:"p"},"getDefaultSupply(...)")," determines the default amount for a given Environment and Biome."),(0,a.kt)("p",null,"And we also have the method ",(0,a.kt)("inlineCode",{parentName:"p"},"getMaxDeviation()")," which determines the maximum amount this resource is allowed to deviate from the default amount."),(0,a.kt)("p",null,"Note here that it will only deviate if the amount is greater than zero."),(0,a.kt)("p",null,'To give you an example of what exactly this means: If our default supply for "The End" is 20 Ender Ores per Chunk and our max-deviation is set to 2,'),(0,a.kt)("p",null,"then the actual amount in a chunk will vary between 20 and 22 Ender Ores, if the deviation is set to 4 it will be 20 - 24 Ender Ores instead. Think of it as the maximum of bonus items."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'public class EnderOreResource implements GEOResource {\n\n  @Override\n  public String getName() {\n    return "Ender Ore";\n  }\n\n  @Override\n  public boolean isObtainableFromGEOMiner() {\n    return true;\n  }\n\n  @Override\n  public int getDefaultSupply(Environment environment, Biome biome) {\n    // Environment is actually the same as the World Type (NORMAL / NETHER / THE_END)\n\n    if (environment == Environment.THE_END) {\n      return 20;\n    }\n    else {\n      return 0;\n    }\n  }\n\n  @Override\n  public int getMaxDeviation() {\n    return 8;\n  }\n\n}\n')),(0,a.kt)("p",null,'This will now spawn between 20 and 28 Ender Ores in "The End" and 0 Ender Ores in any other dimension.'),(0,a.kt)("p",null,"Now all that's left to do is to implement the methods ",(0,a.kt)("inlineCode",{parentName:"p"},"getKey()")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"getItem()"),". For this we will need a ",(0,a.kt)("inlineCode",{parentName:"p"},"NamespacedKey")," which requires our Plugin instance."),(0,a.kt)("p",null,"But we will also need our ItemStack from earlier..."),(0,a.kt)("p",null,"We will just make our life easier by creating a constructor."),(0,a.kt)("p",null,"A constructor is a special form of method that is called when a new instance of that class is created. You can use it to control what parameters are needed when doing ",(0,a.kt)("inlineCode",{parentName:"p"},"new SomeClass(...);"),"."),(0,a.kt)("p",null,"Let's create a new constructor for this class at the top of the file:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"public class EnderOreResource implements GEOResource {\n\n  public EnderOreResource() {\n\n  }\n\n// ... All our other methods come after this\n")),(0,a.kt)("p",null,"Now we can give the constructor some arguments, remember we need our Plugin instance and our ItemStack."),(0,a.kt)("p",null,"So we just create two parameters, one being a Plugin, one an ItemStack."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"public class EnderOreResource implements GEOResource {\n\n  public EnderOreResource(Plugin plugin, ItemStack item) {\n\n  }\n\n// ... All our other methods come after this\n")),(0,a.kt)("p",null,'Now we just need to turn our Plugin into a NamespacedKey, we will simply store it as a "class member" which means that anything inside our class can access this variable.'),(0,a.kt)("p",null,"The keyword ",(0,a.kt)("inlineCode",{parentName:"p"},"final")," means that is a constant, it cannot be changed afterwards. We can set this constant right at the top or initialize it in the constructor."),(0,a.kt)("p",null,"You just need to remember that you cannot re-assign a final variable after it was intiialized."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'public class EnderOreResource implements GEOResource {\n\n  private final NamespacedKey key;\n\n  public EnderOreResource(Plugin plugin, ItemStack item) {\n    this.key = new NamespacedKey(plugin, "ender_ore");\n  }\n\n// ... All our other methods come after this\n')),(0,a.kt)("p",null,"While we are at it, we will also store the item as a constant variable."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'public class EnderOreResource implements GEOResource {\n\n  private final NamespacedKey key;\n  private final ItemStack item;\n\n  public EnderOreResource(Plugin plugin, ItemStack item) {\n    this.key = new NamespacedKey(plugin, "ender_ore");\n    this.item = item;\n  }\n\n// ... All our other methods come after this\n')),(0,a.kt)("p",null,"Now we can implement the remaining two methods."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'public class EnderOreResource implements GEOResource {\n\n  private final NamespacedKey key;\n  private final ItemStack item;\n\n  public EnderOreResource(Plugin plugin, ItemStack item) {\n    this.key = new NamespacedKey(plugin, "ender_ore");\n    this.item = item;\n  }\n\n  @Override\n  public NamespacedKey getKey() {\n    return key;\n  }\n\n  @Override\n  public ItemStack getItem() {\n    // It is important to add a .clone() here since we do not want\n    // to return the original item.\n    return item.clone();\n  }\n\n// ... All our other methods come after this\n')),(0,a.kt)("h2",{id:"4-final-registration"},"4. Final registration"),(0,a.kt)("p",null,"Now we created a new SlimefunItem and a new GEOResource. We only need to register the resource now, so we head back to our main class and into our ",(0,a.kt)("inlineCode",{parentName:"p"},"onEnable()")," method."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'// ...\nSlimefunItemStack enderOreItem = new SlimefunItemStack("ENDER_ORE", "eyJ0ZXh...", "&5Ender Ore", "", "&rThis is a cool Ore", "&rGEO-Mine me in the End");\nSlimefunItem enderOre = new SlimefunItem(itemGroup, enderOreItem, RecipeType.GEO_MINER, new ItemStack[9]);\nenderOre.register();\n')),(0,a.kt)("p",null,"We will now create a new instance of our ",(0,a.kt)("inlineCode",{parentName:"p"},"EnderOreResource")," class and register it."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'// ...\nSlimefunItemStack enderOreItem = new SlimefunItemStack("ENDER_ORE", "eyJ0ZXh...", "&5Ender Ore", "", "&rThis is a cool Ore", "&rGEO-Mine me in the End");\nSlimefunItem enderOre = new SlimefunItem(itemGroup, enderOreItem, RecipeType.GEO_MINER, new ItemStack[9]);\nenderOre.register();\n\nEnderOreResource enderOreResource = new EnderOreResource(this, enderOreItem);\nenderOreResource.register();\n')),(0,a.kt)("p",null,"As defined earlier, we pass two arguments to the constructor, ",(0,a.kt)("inlineCode",{parentName:"p"},"this")," which refers to our Plugin in this context and the ItemStack / SlimefunItemStack."),(0,a.kt)("p",null,'And we are done! Our resource is now generated and can be mined inside "The End" using a GEO-Miner.'),(0,a.kt)("p",null,"Here is the full ",(0,a.kt)("inlineCode",{parentName:"p"},"EnderOreResource")," class:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'public class EnderOreResource implements GEOResource {\n\n  private final NamespacedKey key;\n  private final ItemStack item;\n\n  public EnderOreResource(Plugin plugin, ItemStack item) {\n    this.key = new NamespacedKey(plugin, "ender_ore");\n    this.item = item;\n  }\n\n  @Override\n  public NamespacedKey getKey() {\n    return key;\n  }\n\n  @Override\n  public ItemStack getItem() {\n    // It is important to add a .clone() here since we do not want\n    // to return the original item.\n    return item.clone();\n  }\n\n  @Override\n  public String getName() {\n    return "Ender Ore";\n  }\n\n  @Override\n  public boolean isObtainableFromGEOMiner() {\n    return true;\n  }\n\n  @Override\n  public int getDefaultSupply(Environment environment, Biome biome) {\n    // Environment is actually the same as the World Type (NORMAL / NETHER / THE_END)\n\n    if (environment == Environment.THE_END) {\n      return 20;\n    }\n    else {\n      return 0;\n    }\n  }\n\n  @Override\n  public int getMaxDeviation() {\n    return 8;\n  }\n\n}\n')),(0,a.kt)("p",null,"If you have any questions, feel free to hop on discord and ask them in ",(0,a.kt)("inlineCode",{parentName:"p"},"#programming-help"),"."))}c.isMDXComponent=!0}}]);