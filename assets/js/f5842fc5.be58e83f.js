"use strict";(self.webpackChunkslime_traditional_translation=self.webpackChunkslime_traditional_translation||[]).push([[4894],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>d});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var u=a.createContext({}),p=function(e){var t=a.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},m=function(e){var t=p(e.components);return a.createElement(u.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,u=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),c=p(n),d=i,k=c["".concat(u,".").concat(d)]||c[d]||s[d]||r;return n?a.createElement(k,l(l({ref:t},m),{},{components:n})):a.createElement(k,l({ref:t},m))}));function d(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,l=new Array(r);l[0]=c;var o={};for(var u in t)hasOwnProperty.call(t,u)&&(o[u]=t[u]);o.originalType=e,o.mdxType="string"==typeof e?e:i,l[1]=o;for(var p=2;p<r;p++)l[p]=n[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},9679:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>l,default:()=>s,frontMatter:()=>r,metadata:()=>o,toc:()=>p});var a=n(7462),i=(n(7294),n(3905));const r={title:"Developer Guide (3 Your first Item)",sidebar_position:3},l=void 0,o={unversionedId:"Slimefun/Other-Plugins/Developer-Guide/Developer-Guide-(3-Your-first-Item)",id:"Slimefun/Other-Plugins/Developer-Guide/Developer-Guide-(3-Your-first-Item)",title:"Developer Guide (3 Your first Item)",description:"This is the third Part of our Developer Guide, you can find a full overview on our main page.",source:"@site/docs/Slimefun/Other-Plugins/Developer-Guide/Developer-Guide-(3-Your-first-Item).md",sourceDirName:"Slimefun/Other-Plugins/Developer-Guide",slug:"/Slimefun/Other-Plugins/Developer-Guide/Developer-Guide-(3-Your-first-Item)",permalink:"/docs/Slimefun/Other-Plugins/Developer-Guide/Developer-Guide-(3-Your-first-Item)",draft:!1,tags:[],version:"current",lastUpdatedAt:1660495538,formattedLastUpdatedAt:"Aug 14, 2022",sidebarPosition:3,frontMatter:{title:"Developer Guide (3 Your first Item)",sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Developer Guide (2 Creating the Addon)",permalink:"/docs/Slimefun/Other-Plugins/Developer-Guide/Developer-Guide-(2-Creating-the-Addon)"},next:{title:"Developer Guide (4a Right Clicks)",permalink:"/docs/Slimefun/Other-Plugins/Developer-Guide/Developer-Guide-(4a-Right-Clicks)"}},u={},p=[{value:"1. A little recap",id:"1-a-little-recap",level:2},{value:"2. Creating an ItemGroup",id:"2-creating-an-itemgroup",level:2},{value:"Our id",id:"our-id",level:3},{value:"Our item",id:"our-item",level:3},{value:"Full assembly",id:"full-assembly",level:3},{value:"3. Creating an Item",id:"3-creating-an-item",level:2},{value:"The ItemStack",id:"the-itemstack",level:3},{value:"The recipe",id:"the-recipe",level:3},{value:"4. Adding your item",id:"4-adding-your-item",level:2},{value:"Seasonal and Locked categories",id:"seasonal-and-locked-categories",level:3}],m={toc:p};function s(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"This is the ",(0,i.kt)("strong",{parentName:"p"},"third Part")," of our Developer Guide, you can find a full overview on our ",(0,i.kt)("a",{parentName:"p",href:"/docs/Slimefun/Other-Plugins/Developer-Guide/"},"main page"),"."),(0,i.kt)("p",null,"If you haven't checked out the ",(0,i.kt)("a",{parentName:"p",href:"Developer-Guide-(2-Creating-the-Addon).md"},"second Part of this Guide"),", then please do that."),(0,i.kt)("h2",{id:"1-a-little-recap"},"1. A little recap"),(0,i.kt)("p",null,"In the last part we went over the main class of your plugin."),(0,i.kt)("p",null,"Open up this class again, it should still look a little bit like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"package ...;\n\nimport ...;\n\npublic class SlimefunAddon extends JavaPlugin implements SlimefunAddon {\n\n    @Override\n    public void onEnable() {\n        Config cfg = new Config(this);\n        // ...\n    }\n\n    @Override\n    public void onDisable() {\n        // Logic for disabling the plugin...\n    }\n\n    @Override\n    public JavaPlugin getJavaPlugin() {\n        return this;\n    }\n\n    @Override\n    public String getBugTrackerURL() {\n        return null;\n    }\n\n}\n")),(0,i.kt)("p",null,"The entirety of this part will happen inside your ",(0,i.kt)("inlineCode",{parentName:"p"},"onEnable()")," method, right after you created your ",(0,i.kt)("inlineCode",{parentName:"p"},"Config"),"."),(0,i.kt)("p",null,"So start there."),(0,i.kt)("h2",{id:"2-creating-an-itemgroup"},"2. Creating an ItemGroup"),(0,i.kt)("p",null,'As you probably know, the Slimefun Guide is divided into various item groups, such as "Tools", "Weapons" and many more.'),(0,i.kt)("p",null,"You should create your own item group for your addons."),(0,i.kt)("p",null,"So we will start with that."),(0,i.kt)("p",null,"The constructor for your ItemGroup takes in two parameters:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"id")," represents the identifier of your ItemGroup, a unique name, we use a ",(0,i.kt)("inlineCode",{parentName:"li"},"NamespacedKey")," for this"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"item")," represents the item of your ItemGroup, this item will be used to display your ItemGroup inside the Slimefun Guide.")),(0,i.kt)("h3",{id:"our-id"},"Our id"),(0,i.kt)("p",null,"Let's start with the ",(0,i.kt)("inlineCode",{parentName:"p"},"id"),"."),(0,i.kt)("p",null,"For this we will create a new ",(0,i.kt)("inlineCode",{parentName:"p"},"NamespacedKey"),". A NamespacedKey is an identifier that takes in a lower-case id and your Plugin to produce a unique identifier."),(0,i.kt)("p",null,"You need to come up with a unique id for your item group for this."),(0,i.kt)("p",null,"We will just go with ",(0,i.kt)("inlineCode",{parentName:"p"},"cool_category")," for this."),(0,i.kt)("p",null,"In your ",(0,i.kt)("inlineCode",{parentName:"p"},"onEnable()")," method, create a NamespacedKey like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'NamespacedKey categoryId = new NamespacedKey(this, "cool_category");\n')),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"this")," simply refers to our Plugin."),(0,i.kt)("h3",{id:"our-item"},"Our item"),(0,i.kt)("p",null,"Now onto the ",(0,i.kt)("inlineCode",{parentName:"p"},"item")," of our new ItemGroup."),(0,i.kt)("p",null,"We will use the class CustomItemStack for this. (import ",(0,i.kt)("inlineCode",{parentName:"p"},"io.github.thebusybiscuit.slimefun4.libraries.dough.items.CustomItemStack")," for this)"),(0,i.kt)("p",null,"You can create a new named Item like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'CustomItemStack categoryItem = new CustomItemStack(Material.DIAMOND, "&4Our very cool Category");\n')),(0,i.kt)("p",null,"You can even use Color Codes in your item's name."),(0,i.kt)("p",null,"For a complete list of Materials, consult ",(0,i.kt)("a",{parentName:"p",href:"https://hub.spigotmc.org/javadocs/bukkit/org/bukkit/Material.html"},"Spigot's Javadocs"),"."),(0,i.kt)("h3",{id:"full-assembly"},"Full assembly"),(0,i.kt)("p",null,"Finally, create a new ItemGroup (",(0,i.kt)("inlineCode",{parentName:"p"},"io.github.thebusybiscuit.slimefun4.api.items.ItemGroup"),") like this (inside your ",(0,i.kt)("inlineCode",{parentName:"p"},"onEnable()")," method):"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"ItemGroup itemGroup = new ItemGroup(categoryId, categoryItem);\n")),(0,i.kt)("p",null,"Now our ItemGroup is complete, the full code should look like this now:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'@Override\npublic void onEnable() {\n    Config cfg = new Config(this);\n\n    NamespacedKey categoryId = new NamespacedKey(this, "cool_category");\n    CustomItemStack categoryItem = new CustomItemStack(Material.DIAMOND, "&4Our very cool Category");\n\n    ItemGroup itemGroup = new ItemGroup(categoryId, categoryItem);\n\n    // ...\n}\n')),(0,i.kt)("p",null,"The ItemGroup will not be visible in our Slimefun Guide at this point though."),(0,i.kt)("p",null,"We first need to add an actual SlimefunItem."),(0,i.kt)("h2",{id:"3-creating-an-item"},"3. Creating an Item"),(0,i.kt)("p",null,"Now that we have an ItemGroup set up, we can start to create our actual item."),(0,i.kt)("p",null,"In this part we will only create a very simple item that has no actual logic behind it, we will add mechanics in Part 4."),(0,i.kt)("p",null,"But let's focus on items itself for now."),(0,i.kt)("p",null,"Creating items in Slimefun isn't rocket science but you should still pay attention. We will need to create a new ",(0,i.kt)("inlineCode",{parentName:"p"},"SlimefunItem")," (",(0,i.kt)("inlineCode",{parentName:"p"},"io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem"),")."),(0,i.kt)("p",null,"The constructor takes in 4 parameters:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"itemGroup")," is the ItemGroup this Item is in, for this we will simply use the ItemGroup we created earlier."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"itemStack")," is the SlimefunItemStack this SlimefunItem represents, we will explain what that means in a second."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"recipeType")," describes the Type of our Recipe, in other words this determines the machine this item is crafted in."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"recipe")," is an ItemStack Array of the length 9 that describes the Recipe for this Item.")),(0,i.kt)("h3",{id:"the-itemstack"},"The ItemStack"),(0,i.kt)("p",null,"Since we have already created an ItemGroup, let's start with our ",(0,i.kt)("inlineCode",{parentName:"p"},"SlimefunItemStack"),"."),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"SlimefunItemStack")," tells our SlimefunItem how it looks and also holds the id of our item."),(0,i.kt)("p",null,"The class ",(0,i.kt)("inlineCode",{parentName:"p"},"SlimefunItemStack")," has a lot of constructors. Take a look at them and choose the one that best suits your needs."),(0,i.kt)("p",null,"In this tutorial we will choose the following constructor:"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"new SlimefunItemStack(id, material, name, lore...);")),(0,i.kt)("p",null,"So first we will need an ",(0,i.kt)("inlineCode",{parentName:"p"},"id")," for our SlimefunItemStack."),(0,i.kt)("p",null,"This ",(0,i.kt)("inlineCode",{parentName:"p"},"id")," is a simple String but needs to be unique and in upper case letters. Example: ",(0,i.kt)("inlineCode",{parentName:"p"},'"MY_ADDON_ITEM"'),"."),(0,i.kt)("p",null,"Please choose a unique id that best suits your item."),(0,i.kt)("p",null,"Our ",(0,i.kt)("inlineCode",{parentName:"p"},"material")," is the type of item this Item is rendered as."),(0,i.kt)("p",null,"For a complete list of Materials, consult ",(0,i.kt)("a",{parentName:"p",href:"https://hub.spigotmc.org/javadocs/bukkit/org/bukkit/Material.html"},"Spigot's Javadocs"),"."),(0,i.kt)("p",null,"For the ",(0,i.kt)("inlineCode",{parentName:"p"},"name"),", we can choose a name and even use color codes."),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"name")," is then followed by zero or more lines of lore. (Color codes also supported!)"),(0,i.kt)("p",null,"So the full result of our ",(0,i.kt)("inlineCode",{parentName:"p"},"SlimefunItemStack")," may look like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'SlimefunItemStack itemStack = new SlimefunItemStack("MY_ADDON_ITEM", Material.EMERALD, "&aPretty cool Emerald", "", "&7This is awesome");\n')),(0,i.kt)("p",null,"For the lore I left the first line empty, this is not required but consistent with other items from Slimefun."),(0,i.kt)("h3",{id:"the-recipe"},"The recipe"),(0,i.kt)("p",null,"For the ",(0,i.kt)("inlineCode",{parentName:"p"},"RecipeType"),", we will simply go with the standard: ",(0,i.kt)("inlineCode",{parentName:"p"},"RecipeType.ENHANCED_CRAFTING_TABLE"),". This means that our item is crafted in an Enhanced Crafting Table. We may go into more details on how Recipe Types work, but that may be in a later tutorial."),(0,i.kt)("p",null,"Now for the actual Recipe, for the Recipe we will use an ItemStack Array of the length 9:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"ItemStack[] recipe = {...};\n")),(0,i.kt)("p",null,"The length of 9 represents the 3x3 slots found in the dispenser of an Enhanced Crafting Table."),(0,i.kt)("p",null,"We will simply use an X made out of diamonds for the recipe in this tutorial. You are of course free to come up with any recipe you can imagine."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"ItemStack[] recipe = {\n    new ItemStack(Material.DIAMOND),    null,                               new ItemStack(Material.DIAMOND),\n    null,                               new ItemStack(Material.DIAMOND),    null,\n    new ItemStack(Material.DIAMOND),    null,                               new ItemStack(Material.DIAMOND)\n};\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"PRO TIP")," You can use ",(0,i.kt)("inlineCode",{parentName:"p"},"SlimefunItems.ITEM_ID")," to use items from Slimefun in your Recipe."),(0,i.kt)("p",null,"Let's swap out the middle diamond for a Carbonado."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"ItemStack[] recipe = {\n    new ItemStack(Material.DIAMOND),    null,                               new ItemStack(Material.DIAMOND),\n    null,                               SlimefunItems.CARBONADO,            null,\n    new ItemStack(Material.DIAMOND),    null,                               new ItemStack(Material.DIAMOND)\n};\n")),(0,i.kt)("h2",{id:"4-adding-your-item"},"4. Adding your item"),(0,i.kt)("p",null,"To create the item you we will use the following code:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"SlimefunItem sfItem = new SlimefunItem(itemGroup, itemStack, recipeType, recipe);\n")),(0,i.kt)("p",null,"Finally, to make our item and item group appear in the Slimefun guide, we will call ",(0,i.kt)("inlineCode",{parentName:"p"},"sfItem.register(this)")," to register it."),(0,i.kt)("p",null,"The item will already be craftable too."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"this")," refers to your SlimefunAddon in this case."),(0,i.kt)("p",null,"Let's recap what we got so far:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"We created a new ItemGroup"),(0,i.kt)("p",{parentName:"li"},"a. that uses a customItemStack")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"We created a new SlimefunItem"),(0,i.kt)("p",{parentName:"li"},"a. that has a custom Recipe"),(0,i.kt)("p",{parentName:"li"},"b. that uses a custom SlimefunItemStack"))),(0,i.kt)("p",null,"Here is all of our code again (this should still all be inside your ",(0,i.kt)("inlineCode",{parentName:"p"},"onEnable()")," method):"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'NamespacedKey categoryId = new NamespacedKey(this, "cool_category");\nCustomItemStack categoryItem = new CustomItemStack(Material.DIAMOND, "&4Our very cool Category");\n\n// Our custom Category\nItemGroup itemGroup = new ItemGroup(categoryId, categoryItem);\n\n// The custom item for our SlimefunItem\nSlimefunItemStack itemStack = new SlimefunItemStack("MY_ADDON_ITEM", Material.EMERALD, "&aPretty cool Emerald", "", "&7This is awesome");\n\n// A 3x3 shape representing our recipe\nItemStack[] recipe = {\n    new ItemStack(Material.DIAMOND),    null,                               new ItemStack(Material.DIAMOND),\n    null,                               SlimefunItems.CARBONADO,            null,\n    new ItemStack(Material.DIAMOND),    null,                               new ItemStack(Material.DIAMOND)\n};\n\nSlimefunItem sfItem = new SlimefunItem(itemGroup, itemStack, RecipeType.ENHANCED_CRAFTING_TABLE, recipe);\nsfItem.register(this);\n// Our item is now registered\n')),(0,i.kt)("h3",{id:"seasonal-and-locked-categories"},"Seasonal and Locked categories"),(0,i.kt)("p",null,"You can also create a ",(0,i.kt)("inlineCode",{parentName:"p"},"SeasonalItemGroup")," or a ",(0,i.kt)("inlineCode",{parentName:"p"},"LockedItemGroup")," instead of a generic ",(0,i.kt)("inlineCode",{parentName:"p"},"ItemGroup"),"."),(0,i.kt)("p",null,"These types of item groups require a specified item group tier. This integer roughly determines the position of the item group inside Slimefun guide. The guide starts populating with tier 1 and onwards. The other criteria is the order of registering (creation of ",(0,i.kt)("inlineCode",{parentName:"p"},"ItemGroup")," object)."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Seasonal item groups are hidden throughout the whole year except for 1 specific month.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Locked item groups require all researches on parent categories to be unlocked."))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"Month month = Month.JAN; // This is any enum from java.time.Month.\n\nSeasonalItemGroup group = new SeasonalItemGroup(categoryId, categoryItem, tier, month);\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"// This item group will require `parentItemGroupA` and `parentItemGroupB` to be fully unlocked.\nLockedItemGroup category = new LockedItemGroup(categoryId, categoryItem, tier, parentItemGroupA.getKey(), parentItemGroupB.getKey());\n")),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"Developer-Guide-(4a-Right-Clicks).md"},(0,i.kt)("strong",{parentName:"a"},"> Continue with Part 4a"))))}s.isMDXComponent=!0}}]);