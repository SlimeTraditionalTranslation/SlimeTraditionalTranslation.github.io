"use strict";(self.webpackChunkslime_traditional_translation=self.webpackChunkslime_traditional_translation||[]).push([[6862],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return d}});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=a.createContext({}),p=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(c.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,c=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),m=p(n),d=i,h=m["".concat(c,".").concat(d)]||m[d]||s[d]||r;return n?a.createElement(h,o(o({ref:t},u),{},{components:n})):a.createElement(h,o({ref:t},u))}));function d(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=m;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var p=2;p<r;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},3163:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return c},default:function(){return d},frontMatter:function(){return l},metadata:function(){return p},toc:function(){return s}});var a=n(7462),i=n(3366),r=(n(7294),n(3905)),o=["components"],l={title:"Developer Guide (4b Radioactive and WitherProof)",sidebar_position:5},c=void 0,p={unversionedId:"Slimefun/Other-Plugins/Developer-Guide/Developer-Guide-(4b-Radioactive-and-WitherProof)",id:"Slimefun/Other-Plugins/Developer-Guide/Developer-Guide-(4b-Radioactive-and-WitherProof)",title:"Developer Guide (4b Radioactive and WitherProof)",description:"This is the fourth Part of our Developer Guide, you can find a full overview on our main page.",source:"@site/docs/Slimefun/Other-Plugins/Developer-Guide/Developer-Guide-(4b-Radioactive-and-WitherProof).md",sourceDirName:"Slimefun/Other-Plugins/Developer-Guide",slug:"/Slimefun/Other-Plugins/Developer-Guide/Developer-Guide-(4b-Radioactive-and-WitherProof)",permalink:"/docs/Slimefun/Other-Plugins/Developer-Guide/Developer-Guide-(4b-Radioactive-and-WitherProof)",tags:[],version:"current",lastUpdatedAt:1660490225,formattedLastUpdatedAt:"8/14/2022",sidebarPosition:5,frontMatter:{title:"Developer Guide (4b Radioactive and WitherProof)",sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Developer Guide (4a Right Clicks)",permalink:"/docs/Slimefun/Other-Plugins/Developer-Guide/Developer-Guide-(4a-Right-Clicks)"},next:{title:"Developer Guide (5 Researches)",permalink:"/docs/Slimefun/Other-Plugins/Developer-Guide/Developer-Guide-(5-Researches)"}},u={},s=[{value:"1. A Recap of part 4a",id:"1-a-recap-of-part-4a",level:2},{value:"2. Item Attributes",id:"2-item-attributes",level:2},{value:"3. Changing the item lore",id:"3-changing-the-item-lore",level:2},{value:"4. Implementing any other ItemAttribute",id:"4-implementing-any-other-itemattribute",level:2}],m={toc:s};function d(e){var t=e.components,n=(0,i.Z)(e,o);return(0,r.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"This is the ",(0,r.kt)("strong",{parentName:"p"},"fourth Part")," of our Developer Guide, you can find a full overview on our ",(0,r.kt)("a",{parentName:"p",href:"/docs/Slimefun/Other-Plugins/Developer-Guide/"},"main page"),"."),(0,r.kt)("p",null,"If you haven't checked out the ",(0,r.kt)("a",{parentName:"p",href:"Developer-Guide-(3-Your-first-Item).md"},"third Part of this Guide"),", then please do that."),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"The fourth part is divided into two sections, this is Section b"),"."),(0,r.kt)("h2",{id:"1-a-recap-of-part-4a"},"1. A Recap of part 4a"),(0,r.kt)("p",null,"Part 4a is not necessarily ",(0,r.kt)("em",{parentName:"p"},"required")," to follow this part."),(0,r.kt)("p",null,"However we introduced some very important principles that we will need here too, so instead of re-explaining everything, go check out ",(0,r.kt)("a",{parentName:"p",href:"Developer-Guide-(4a-Right-Clicks).md"},"part 4a")," if something is unclear."),(0,r.kt)("p",null,"Alright, last time we created a custom cake that sets you on fire when you try to eat it."),(0,r.kt)("p",null,"But it also gives one XP level when you right-click with that cake in your hand."),(0,r.kt)("p",null,"To achieve this we introduced classes, more specifically we taught you how to create your own class that extends SlimefunItem, here is our code of that class so far."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"public class FireCake extends SlimefunItem {\n\n    public FireCake(ItemGroup itemGroup, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {\n        super(itemGroup, item, recipeType, recipe);\n    }\n\n    @Override\n    public void preRegister() {\n        BlockUseHandler blockUseHandler = this::onBlockRightClick;\n        addItemHandler(blockUseHandler);\n\n        ItemUseHandler itemUseHandler = this::onItemRightClick;\n        addItemHandler(itemUseHandler);\n    }\n\n    private void onBlockRightClick(PlayerRightClickEvent event) {\n        // This will prevent the Player from eating this cake.\n        event.cancel();\n        // Now set the Player on fire for 5 seconds\n        event.getPlayer().setFireTicks(5 * 20);\n    }\n\n    private void onItemUseRightClick(PlayerRightClickEvent event) {\n        // Calling event.cancel() in here would prevent the cake\n        // from being placed down.\n        event.getPlayer().giveExpLevels(1);\n    }\n\n}\n")),(0,r.kt)("p",null,"We can ignore the preRegister() and right-click methods for now, those were covered in part 4a."),(0,r.kt)("h2",{id:"2-item-attributes"},"2. Item Attributes"),(0,r.kt)("p",null,"Slimefun items can have functionality (called ItemHandlers) but they can also have some properties (called ItemAttributes)."),(0,r.kt)("p",null,"Note that these attributes are not related to Minecraft's attributes system."),(0,r.kt)("p",null,"An ",(0,r.kt)("inlineCode",{parentName:"p"},"ItemAttribute")," adds a certain property to a SlimefunItem, such as being radioactive."),(0,r.kt)("p",null,"Let's make our FireCake also radioactive, shall we?"),(0,r.kt)("p",null,"To add an ItemAttribute, simply add it to your class declaration."),(0,r.kt)("p",null,"However ItemAttributes are interfaces, not classes. So you need to use the keyword ",(0,r.kt)("inlineCode",{parentName:"p"},"implements")," here."),(0,r.kt)("p",null,"As we covered in the last part: Classes can only have one direct parent class. But they can implement as many interfaces as they want."),(0,r.kt)("p",null,"Let's implement the ",(0,r.kt)("inlineCode",{parentName:"p"},"Radioactive")," interface. Now your code may look like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"public class FireCake extends SlimefunItem implements Radioactive {\n\n    public FireCake(ItemGroup itemGroup, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {\n        super(itemGroup, item, recipeType, recipe);\n    }\n\n    // ...\n\n}\n")),(0,r.kt)("p",null,"Import the inteface."),(0,r.kt)("p",null,"We are not done yet though, each interface often defines a set of methods that we need to implement ourselves."),(0,r.kt)("p",null,"Your IDE should already prompt you to do that."),(0,r.kt)("p",null,"In the case of ",(0,r.kt)("inlineCode",{parentName:"p"},"Radioactive"),", there is only one method: ",(0,r.kt)("inlineCode",{parentName:"p"},"getRadioactivity()"),". Implement that method like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"public class FireCake extends SlimefunItem implements Radioactive {\n\n    public FireCake(ItemGroup itemGroup, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {\n        super(itemGroup, item, recipeType, recipe);\n    }\n\n    @Override\n    public Radioactivity getRadiation() {\n      // ?\n    }\n\n    // ...\n\n}\n")),(0,r.kt)("p",null,"Now we need to give the method something to do."),(0,r.kt)("p",null,"This method expects us to return a value of the type ",(0,r.kt)("inlineCode",{parentName:"p"},"Radioactivity"),". ",(0,r.kt)("inlineCode",{parentName:"p"},"Radioactivity"),' is an enum. Enums (or "Enumerations") are a type of class that cannot be created that easily.'),(0,r.kt)("p",null,"An enum has a limited amount of possible states and each state is saved as a constant, accessible via ",(0,r.kt)("inlineCode",{parentName:"p"},"EnumName.CONSTANT_NAME"),"."),(0,r.kt)("p",null,"You can see all constants from that enum on our ",(0,r.kt)("a",{parentName:"p",href:"https://slimefun.github.io/javadocs/Slimefun4/docs/io/github/thebusybiscuit/slimefun4/core/attributes/Radioactivity.html"},"Javadocs"),"."),(0,r.kt)("p",null,"We are just gonna choose the level HIGH for now. We can simply return that constant."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"public class FireCake extends SlimefunItem implements Radioactive {\n\n    public FireCake(ItemGroup itemGroup, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {\n        super(itemGroup, item, recipeType, recipe);\n    }\n\n    @Override\n    public Radioactivity getRadiation() {\n        return Radioactivity.HIGH;\n    }\n\n    // ...\n\n}\n")),(0,r.kt)("p",null,"Now your item is already radioactive, it will damage players and require them to wear a Hazmat Suit."),(0,r.kt)("p",null,"However our unsuspecting player have no way to know that this item is radioactive..."),(0,r.kt)("h2",{id:"3-changing-the-item-lore"},"3. Changing the item lore"),(0,r.kt)("p",null,"The best way of letting players know what your item does is through the lore."),(0,r.kt)("p",null,"Let's go back inside our ",(0,r.kt)("inlineCode",{parentName:"p"},"onEnable()")," method from the main class."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'NamespacedKey categoryId = new NamespacedKey(this, "cool_category");\nCustomItemStack categoryItem = new CustomItemStack(Material.DIAMOND, "&4Our very cool Category");\nItemGroup itemGroup = new ItemGroup(categoryId, categoryItem);\n\n// The custom item for our SlimefunItem\nSlimefunItemStack itemStack = new SlimefunItemStack("FIRE_CAKE", Material.CAKE, "&4Fire Cake", "", "&cBe careful");\n\n// A 3x3 shape representing our recipe\nItemStack[] recipe = {\n    new ItemStack(Material.BLAZE_POWDER),    null,                               new ItemStack(Material.BLAZE_POWDER),\n    null,                                    new ItemStack(Material.CAKE),       null,\n    new ItemStack(Material.BLAZE_POWDER),    null,                               new ItemStack(Material.BLAZE_POWDER)\n};\n\n// We are now using our own custom class for this\nFireCake cake = new FireCake(itemGroup, itemStack, RecipeType.ENHANCED_CRAFTING_TABLE, recipe);\ncake.register(this);\n')),(0,r.kt)("p",null,"Let's change the lore of our ",(0,r.kt)("inlineCode",{parentName:"p"},"itemStack"),', it currently reads "&cBe careful".'),(0,r.kt)("p",null,"We wanna include a tooltip that warns about our radioactive properties."),(0,r.kt)("p",null,"Luckily Slimefun has a built-in way for that."),(0,r.kt)("p",null,"There is a static method called ",(0,r.kt)("inlineCode",{parentName:"p"},"LoreBuilder.radioactive(...)")," which takes a constant of ",(0,r.kt)("inlineCode",{parentName:"p"},"Radioactivity")," as an argument."),(0,r.kt)("p",null,"We can use that to create a string that warns about radioactivity. This will be the same string that Slimefun's standard items use."),(0,r.kt)("p",null,"If you wanted to go one step further you could also use the static constant ",(0,r.kt)("inlineCode",{parentName:"p"},"LoreBuilder.HAZMAT_SUIT_REQUIRED")," which will warn them to wear a Hazmat Suit. Let's do that."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'NamespacedKey categoryId = new NamespacedKey(this, "cool_category");\nCustomItemStack categoryItem = new CustomItemStack(Material.DIAMOND, "&4Our very cool Category");\nItemGroup itemGroup = new ItemGroup(categoryId, categoryItem);\n\n// The custom item for our SlimefunItem\nSlimefunItemStack itemStack = new SlimefunItemStack("FIRE_CAKE", Material.CAKE, "&4Fire Cake", "", LoreBuilder.radioactive(Radioactivity.HIGH), LoreBuilder.HAZMAT_SUIT_REQUIRED);\n\n// A 3x3 shape representing our recipe\nItemStack[] recipe = {\n    new ItemStack(Material.BLAZE_POWDER),    null,                               new ItemStack(Material.BLAZE_POWDER),\n    null,                                    new ItemStack(Material.CAKE),       null,\n    new ItemStack(Material.BLAZE_POWDER),    null,                               new ItemStack(Material.BLAZE_POWDER)\n};\n\n// We are now using our own custom class for this\nFireCake cake = new FireCake(itemGroup, itemStack, RecipeType.ENHANCED_CRAFTING_TABLE, recipe);\ncake.register(this);\n')),(0,r.kt)("p",null,"Now our item will have the appropriate tooltips."),(0,r.kt)("h2",{id:"4-implementing-any-other-itemattribute"},"4. Implementing any other ItemAttribute"),(0,r.kt)("p",null,"The process for implementing any ",(0,r.kt)("inlineCode",{parentName:"p"},"\xcctemAttribute")," is pretty much the same."),(0,r.kt)("p",null,"It is always recommended to inform the user of these attributes via the ",(0,r.kt)("inlineCode",{parentName:"p"},"LoreBuilder")," class or manually."),(0,r.kt)("p",null,"You can find a full list of all available Item Attributes on the ",(0,r.kt)("a",{parentName:"p",href:"https://slimefun.github.io/javadocs/Slimefun4/docs/io/github/thebusybiscuit/slimefun4/core/attributes/ItemAttribute.html"},"Javadocs")," under ",(0,r.kt)("strong",{parentName:"p"},'"All Known Subinterfaces"'),"."),(0,r.kt)("p",null,'As a little bonus, let\'s implement the "WitherProof" attribute.'),(0,r.kt)("p",null,"This attribute will prevent Withers from destroying our block."),(0,r.kt)("p",null,"Let's go back to our class and implement that interface too. You can seperate interfaces you wanna implement with a comma."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"public class FireCake extends SlimefunItem implements Radioactive, WitherProof {\n\n    public FireCake(ItemGroup itemGroup, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {\n        super(itemGroup, item, recipeType, recipe);\n    }\n\n    // ...\n\n}\n")),(0,r.kt)("p",null,"Now your process will be the same, WitherProof also has a method it requires to be implemented."),(0,r.kt)("p",null,"The method is called ",(0,r.kt)("inlineCode",{parentName:"p"},"onAttack()")," and it will be run whenever a Wither tried to destroy this block. Solely implementing that interface will already prevent that though. So with that method generated, the code will look like this."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"public class FireCake extends SlimefunItem implements Radioactive, WitherProof {\n\n    public FireCake(ItemGroup itemGroup, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {\n        super(itemGroup, item, recipeType, recipe);\n    }\n\n    @Override\n    public void onAttack(Block block, Wither wither) {\n\n    }\n\n    // ...\n\n}\n")),(0,r.kt)("p",null,"The parameters ",(0,r.kt)("inlineCode",{parentName:"p"},"block")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"wither")," correspond to the Block the Wither tried to destroy and the Wither who tried to destroy that block."),(0,r.kt)("p",null,"You can leave that method empty, the event will be cancelled by the interface anyway."),(0,r.kt)("p",null,"But you can also do something inside that method, such as spawning a particle for example."),(0,r.kt)("p",null,"or even better... Let's instantly kill any Wither that tries to eat our precious cake."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"public class FireCake extends SlimefunItem implements Radioactive, WitherProof {\n\n    public FireCake(ItemGroup itemGroup, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {\n        super(itemGroup, item, recipeType, recipe);\n    }\n\n    @Override\n    public void onAttack(Block block, Wither wither) {\n        wither.setHealth(0);\n    }\n\n    // ...\n\n}\n")),(0,r.kt)("p",null,"Setting the Wither's health to zero will instantly kill it."),(0,r.kt)("p",null,"Now just to recapture everything, here is the full code of our ",(0,r.kt)("inlineCode",{parentName:"p"},"FireCake")," class."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"public class FireCake extends SlimefunItem implements Radioactive, WitherProof {\n\n    public FireCake(ItemGroup itemGroup, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {\n        super(itemGroup, item, recipeType, recipe);\n    }\n\n    @Override\n    public Radioactivity getRadiation() {\n        return Radioactivity.HIGH;\n    }\n\n    @Override\n    public void onAttack(Block block, Wither wither) {\n        wither.setHealth(0);\n    }\n\n    @Override\n    public void preRegister() {\n        BlockUseHandler blockUseHandler = this::onBlockRightClick;\n        addItemHandler(blockUseHandler);\n\n        ItemUseHandler itemUseHandler = this::onItemRightClick;\n        addItemHandler(itemUseHandler);\n    }\n\n    private void onBlockRightClick(PlayerRightClickEvent event) {\n        // This will prevent the Player from eating this cake.\n        event.cancel();\n        // Now set the Player on fire for 5 seconds\n        event.getPlayer().setFireTicks(5 * 20);\n    }\n\n    private void onItemUseRightClick(PlayerRightClickEvent event) {\n        // Calling event.cancel() in here would prevent the cake\n        // from being placed down.\n        event.getPlayer().giveExpLevels(1);\n    }\n\n}\n")),(0,r.kt)("p",null,"So at the end of the day we have made a Cake that..."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"sets you on fire when you try to eat it"),(0,r.kt)("li",{parentName:"ul"},"gives you radiation when you carry it"),(0,r.kt)("li",{parentName:"ul"},"gives you one XP level when you right-click it"),(0,r.kt)("li",{parentName:"ul"},"instantly kills any Wither that tries to attack it")),(0,r.kt)("p",null,"I think that is a pretty cool item, given that it is a little... strange and unusual."),(0,r.kt)("p",null,"If you have any questions, feel free to hop on discord and ask them in ",(0,r.kt)("inlineCode",{parentName:"p"},"#programming-help"),"."),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"Developer-Guide-(5-Researches).md"},(0,r.kt)("strong",{parentName:"a"},"> Continue with Part 5"))))}d.isMDXComponent=!0}}]);